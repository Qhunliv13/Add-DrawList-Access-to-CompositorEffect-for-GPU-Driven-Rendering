<?xml version="1.0" encoding="UTF-8" ?>
<class name="RenderData" inherits="Object" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Abstract render data object, holds frame data related to rendering a single frame of a viewport.
	</brief_description>
	<description>
		Abstract render data object, exists for the duration of rendering a single viewport.
		[b]Note:[/b] This is an internal rendering server object, do not instantiate this from script.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="copy_camera_matrices_to_buffer" qualifiers="const">
			<return type="void" />
			<param index="0" name="buffer" type="RID" />
			<param index="1" name="offset" type="int" default="0" />
			<description>
				Helper function for compute shaders to copy camera matrices to a GPU buffer in Godot's standard format.
				The buffer layout is: projection matrix (64 bytes), inverse projection matrix (64 bytes), inverse view matrix (64 bytes), view matrix (64 bytes). Total size: 256 bytes (64 floats).
				Use this in combination with [method get_current_draw_list] for GPU-driven rendering.
				[codeblock]
				# In CompositorEffect with access_draw_list = true
				var camera_buffer = rd.uniform_buffer_create(256)
				render_data.copy_camera_matrices_to_buffer(camera_buffer)
				[/codeblock]
			</description>
		</method>
		<method name="get_camera_attributes" qualifiers="const">
			<return type="RID" />
			<description>
				Returns the [RID] of the camera attributes object in the [RenderingServer] being used to render this viewport.
			</description>
		</method>
		<method name="get_current_draw_list" qualifiers="const">
			<return type="int" />
			<description>
				Returns the current active DrawListID if called within a [CompositorEffect] callback that has [member CompositorEffect.access_draw_list] enabled. Returns [code]-1[/code] if not available.
				This allows compute shaders to generate geometry and render it directly on the GPU without CPU involvement, enabling GPU-driven rendering.
				[b]Note:[/b] Only available at [constant CompositorEffect.EFFECT_CALLBACK_TYPE_POST_OPAQUE] and [constant CompositorEffect.EFFECT_CALLBACK_TYPE_POST_TRANSPARENT] callback stages.
				[codeblock]
				var draw_list = render_data.get_current_draw_list()
				if draw_list != -1:
				    var rd = RenderingServer.get_rendering_device()
				    rd.draw_list_bind_render_pipeline(draw_list, pipeline)
				    rd.draw_list_draw(draw_list, false, 1, vertex_count)
				[/codeblock]
			</description>
		</method>
		<method name="get_current_framebuffer" qualifiers="const">
			<return type="RID" />
			<description>
				Returns the current framebuffer [RID] being rendered to. Returns an invalid [RID] if not available.
				Use this with [method get_current_draw_list] to access the framebuffer format for custom rendering.
			</description>
		</method>
		<method name="get_environment" qualifiers="const">
			<return type="RID" />
			<description>
				Returns the [RID] of the environment object in the [RenderingServer] being used to render this viewport.
			</description>
		</method>
		<method name="get_render_scene_buffers" qualifiers="const">
			<return type="RenderSceneBuffers" />
			<description>
				Returns the [RenderSceneBuffers] object managing the scene buffers for rendering this viewport.
			</description>
		</method>
		<method name="get_render_scene_data" qualifiers="const">
			<return type="RenderSceneData" />
			<description>
				Returns the [RenderSceneData] object managing this frames scene data.
			</description>
		</method>
	</methods>
</class>
